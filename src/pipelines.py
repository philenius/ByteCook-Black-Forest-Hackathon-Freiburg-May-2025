import time

from abc import ABC
from pathlib import Path

from langchain.chains import LLMChain
from langchain.chat_models import ChatOpenAI
from langchain_core.output_parsers import PydanticOutputParser
from langchain_core.prompts import ChatPromptTemplate, PromptTemplate
from models import QuotationItems
from streamlit.delta_generator import DeltaGenerator


class AbstractPipeline(ABC):
    @staticmethod
    def extract_quotation_items_from_pdf(
        pdf_content: str,
        openrouter_api_key: str,
        progress_bar: DeltaGenerator,
    ) -> QuotationItems:
        raise NotImplementedError()


class PipelineV1(AbstractPipeline):
    @staticmethod
    def extract_quotation_items_from_pdf(
        pdf_content: str,
        openrouter_api_key: str,
        progress_bar: DeltaGenerator,
    ) -> QuotationItems:
        llm = ChatOpenAI(
            openai_api_base="https://openrouter.ai/api/v1",
            openai_api_key=openrouter_api_key,
            model="openai/gpt-4o-mini",
        )
        parser = PydanticOutputParser(pydantic_object=QuotationItems)

        path_to_hackathon_challenge_guidelines = (
            Path(__file__).parents[1] / "HackathonChallengeGuidelines.md"
        )

        if not path_to_hackathon_challenge_guidelines.exists():
            raise FileNotFoundError(
                f"File not found: {path_to_hackathon_challenge_guidelines}"
            )

        prompt = PromptTemplate(
            template=path_to_hackathon_challenge_guidelines.read_text()
            + "\nThe following description is an excerpt from a service specification document. The specification might contain multiple requirements. Please extract each requirement separately.\n{text}\n{format_instructions}",
            input_variables=["text"],
            partial_variables={"format_instructions": parser.get_format_instructions()},
        )

        chain = LLMChain(llm=llm, prompt=prompt)

        progress_bar.progress(
            0.5,
            "üîç Extracting, analyzing, and structuring relevant content from the PDF...",
        )
        output = chain.run(text=pdf_content)

        return parser.parse(output)


class PipelineV2(AbstractPipeline):
    @staticmethod
    def extract_quotation_items_from_pdf(
        pdf_content: str,
        openrouter_api_key: str,
        progress_bar: DeltaGenerator,
    ) -> QuotationItems:
        model = ChatOpenAI(
            openai_api_base="https://openrouter.ai/api/v1",
            openai_api_key=openrouter_api_key,
            model="o4-mini-2025-04-16",
        )

        extraction_template = """
        Sie sind ein hochspezialisierter Assistent f√ºr die Extraktion von Daten aus deutschen Leistungsverzeichnissen (LVs) im Bauwesen. Ihre Hauptaufgabe ist die pr√§zise und vollst√§ndige Extraktion von Ordnungszahlen und den dazugeh√∂rigen Leistungsbeschreibungen. Ihre Arbeitsweise ist akribisch und detailorientiert, um h√∂chste Genauigkeit zu gew√§hrleisten.

        Bitte analysiere den folgenden Textauszug aus einem Leistungsverzeichnis. Extrahiere jede einzelne Position und ihre vollst√§ndige Leistungsbeschreibung gem√§√ü den unten stehenden detaillierten Anweisungen und Definitionen.

        **Aufgabe:**
        Extrahiere alle Positionen aus dem bereitgestellten LV-Text. Eine Position besteht aus einer Ordnungszahl (OZ) und der dazugeh√∂rigen Leistungsbeschreibung.

        **Definitionen und Regeln f√ºr die Extraktion:**

        1.  **Ordnungszahl (OZ):**
            * Eine hierarchische Nummerierung, die eine Position eindeutig identifiziert (z.B. `1.`, `1.1.`, `1.1.10`, `1.1.10.A`).
            * Sie steht immer am Anfang der Zeile, die eine neue Position einleitet, eventuell mit f√ºhrenden Leerzeichen.

        2.  **Leistungsbeschreibung:**
            * Beginnt direkt nach der Ordnungszahl in derselben Zeile und kann sich √ºber mehrere nachfolgende Zeilen erstrecken.
            * Umfasst *allen* beschreibenden Text, inklusive:
                * Detaillierte Material- und Ausf√ºhrungsangaben.
                * Ma√üangaben (z.B. `RBLM b/h = 0,76 x 2,135 m`).
                * Hinweise wie `wie Pos. XX, jedoch...`.
                * Zusatzinformationen wie `angebot. Fabrikat: '.................................................'`.
                * Angaben zum `Einbauort: ...`.
                * Markierungen wie `*** Bedarfsposition ohne GB` oder `*** Eventualposition`.
                * Aufz√§hlungen innerhalb der Beschreibung (z.B. mit `‚Ä¢`).
            * Die Leistungsbeschreibung einer Position endet *unmittelbar bevor* eine der folgenden Bedingungen erf√ºllt ist:
                * Die Zeile(n) mit Mengenangabe, Mengeneinheit (ME), Einheitspreis (EP) und Gesamtbetrag (GB) beginnen (typisches Muster: `X,XXX Stk ......................... .........................` oder `X,XXX Stk ......................... Nur Einh.-Pr.`).
                * Die Ordnungszahl einer *neuen* Position beginnt.
                * Eine klare Summenzeile oder eine √úberschrift f√ºr einen neuen Abschnitt/Titel beginnt (z.B. `Summe 1.1. ...`, `2. N√§chster Titel`).

        3.  **Zu ignorierende Elemente (nicht Teil der Beschreibung oder OZ):**
            * Wiederkehrende Kopfzeilen jeder Seite (z.B. Firmenname wie "SF BAU MOSER GmbH & Co. KG", Adressdaten, Telefonnummern, Projektnamen, LV-Bezeichnung im Kopf).
            * Wiederkehrende Fu√üzeilen jeder Seite (z.B. "Druckdatum:", "Seite: X von Y").
            * Die allgemeine Spalten√ºberschrift-Zeile des LVs (z.B. "Ordnungszahl Leistungsbeschreibung Menge ME Einheitspreis Gesamtbetrag").
            * Leerzeilen, die nicht logisch zur Formatierung einer mehrzeiligen Beschreibung geh√∂ren.
            * Die expliziten Werte f√ºr Menge, ME, Einheitspreis und Gesamtbetrag selbst. Diese markieren das Ende der Beschreibung.
            * √úbergeordnete Titel-√úberschriften, die keine auszuf√ºhrenden Positionen sind (z.B. `1. Innent√ºren` ist ein Titel, `1.1. Holzt√ºren mit Stahl-U-Zarge` ist auch ein Titel ‚Äì die extrahierbaren Positionen beginnen typischerweise mit mindestens drei Gliederungsebenen, wie `1.1.10`). Pr√ºfe sorgf√§ltig, ob eine Zeile eine beschreibende Position oder nur eine strukturelle √úberschrift ist. Extrahiere nur Zeilen, denen eine Mengenangabe folgen w√ºrde.

        **Ausgabeformat:**
        Bitte gib das Ergebnis als eine JSON-Liste von Objekten zur√ºck. Jedes Objekt repr√§sentiert eine extrahierte Position und muss exakt die folgenden zwei Schl√ºssel enthalten:
        * `"ordnungszahl"`: Die extrahierte Ordnungszahl als String.
        * `"beschreibung"`: Die vollst√§ndige, mehrzeilige Leistungsbeschreibung als einzelner String. Zeilenumbr√ºche innerhalb der Originalbeschreibung sollen als `\n` im String erhalten bleiben.

        **Wichtige Hinweise zur Genauigkeit:**
        * Stelle sicher, dass die gesamte Leistungsbeschreibung f√ºr jede Position erfasst wird, ohne K√ºrzungen oder Auslassungen.
        * Achte darauf, keine Elemente der Menge/ME/Preis-Zeile oder Kopf-/Fu√üzeilen in die Beschreibung aufzunehmen.
        * Die Unterscheidung zwischen mehrzeiliger Beschreibung und dem Beginn der Menge/ME/Preis-Zeile ist kritisch.
        * Sei besonders sorgf√§ltig bei Positionen, die sich √ºber Seitenumbr√ºche erstrecken (obwohl der hier bereitgestellte Text bereits zusammenh√§ngend sein sollte).

        Bitte beginne nun mit der Extraktion aus dem folgenden Text:{input_text}"""

        categorization_template = """# Rolle:  
        Sie sind ein hochspezialisierter KI-Assistent **ausschlie√ülich f√ºr t√ºrbezogene Bauleistungen**. Ihre Aufgabe ist die pr√§zise Filterung und Kategorisierung von LV-Positionen, die **direkt mit T√ºren** verbunden sind. Ignorieren Sie rigoros alle nicht-t√ºrbezogenen Elemente.

        # Aufgabe:  
        1. **Filterung**: Identifizieren Sie, ob die Position t√ºrbezogen ist.  
        2. **Kategorisierung**: Ordnen Sie t√ºrbezogene Positionen einer Kategorie (Elemente/Zubeh√∂r/Dienstleistungen) und Artikelnummer zu.  
        3. **Ausgabe**: Geben Sie **nur t√ºrbezogene Positionen** im JSON-Format aus.

        # Kategorisierungslogik:  

        ## Schritt 1: T√ºrbezug pr√ºfen  
        Eine Position ist **t√ºrbezogen**, wenn mindestens eines zutrifft:  
        - Enth√§lt Keywords: *"T√ºr", "Zarge", "T√ºrblatt", "Schloss", "Band", "Schlie√üer", "Dichtung"*  
        - Bezieht sich auf Einbau, Wartung oder √Ñnderung einer T√ºr.  

        **Ausschlusskriterien (ignorieren):**  
        - *"Fenster", "L√ºftungsgitter", "WC-Beschlag", "Badarmatur", "Treppe", "Fassade", "Wand"* (sofern kein T√ºrbezug)  
        - Allgemeine Baustellenarbeiten (*"Stundenlohn", "Aufma√ü"* ohne T√ºrkontext).

        ## Schritt 2: Kategoriezuordnung (nur bei T√ºrbezug)  
        **A. LV-Hierarchie beachten**
        Kapitelstruktur dominiert:
        Beginnt ein Kapitel mit Holzt√ºren (z. B. "1.1"), werden alle Unterpositionen 620001 zugeordnet, sofern nicht explizit Stahl genannt wird.
        Beginnt ein Kapitel mit Stahlt√ºren (z. B. "1.2"), gelten die Stahlregeln.

        **B. Elemente**  
        - **Holzt√ºren (620001)**:  
        - *"Holzt√ºrblatt", "Holzzarge", "Spanplatte", "HPL-T√ºr"*  
        - **Ausnahme**: Stahlzarge + Holzt√ºrblatt ‚Üí 620001.  

        - **Stahlt√ºren (670001)**:  
        - *"Stahlzarge", "Stahl-U-Profil", "Feuerschutzt√ºr", "Stahlrahmen"*  
        - **Sonderregel**: Oberlichter/Verglasungen in Stahlzarge ‚Üí 670001.  

        **C. Zubeh√∂r**  
        - **Beschl√§ge (240001)**:  
        - *"T√ºrgriff", "Dr√ºckergarnitur", "Band", "Scharnier"*  
        - **Ausschluss**: *"Fenstergriff", "M√∂belbeschlag"*.  

        - **Schl√∂sser (360001)**:  
        - *"Einsteckschloss", "3-Punkt-Verriegelung", "Zylinder"*.  

        - **T√ºrschlie√üer (290001)**:  
        - *"T√ºrschlie√üer", "OTS", "GEZE TS"*.  

        **D. Dienstleistungen**  
        - *"Montage von T√ºren", "Einbau Stahlzarge", "Wartung T√ºrschlie√üer"* ‚Üí **DL8110016**.  

        # Ausgabeformat:  
        {format_instructions} 

        Text:
        {input_text}
        """

        extraction_prompt = ChatPromptTemplate.from_template(extraction_template)
        extraction_chain = extraction_prompt | model

        progress_bar.progress(
            0.33,
            "üîç Extracting and analyzing relevant content from the PDF...",
        )
        extraction_result = extraction_chain.invoke({"input_text": pdf_content})

        parser = PydanticOutputParser(pydantic_object=QuotationItems)
        classifcation_prompt = PromptTemplate(
            template=categorization_template,
            input_variables=["input_text"],
            partial_variables={"format_instructions": parser.get_format_instructions()},
        )
        classifcation_chain = classifcation_prompt | model

        progress_bar.progress(
            0.66, "üõ†Ô∏è Classifying and structuring detected requirements..."
        )
        categorization_result = classifcation_chain.invoke(
            {"input_text": extraction_result.content}
        )

        return parser.parse(categorization_result.content)
